#!/usr/bin/env python

import os
import sys
import errno
import random
import shutil
import zipfile
import hashlib
import argparse
import subprocess as sp
from textwrap import dedent
import xml.etree.ElementTree as ET
from contextlib import contextmanager
from ConfigParser import ConfigParser


class Person(dict):
    def __init__(self, name, obj):
        self.update(obj)
        self["depth"] = int(self.get("depth", 3))
        self["name"] = name

    def has_password(self):
        return os.path.exists(self.get_password_file_path())

    def set_password_file_prefix(self, prefix):
        self._password_file_prefix = prefix

    def get_password_file_path(self):
        return pjoin(
            self._password_file_prefix,
            "%s-password.txt" %(self, ),
        )

    def get_or_create_password_file(self):
        path = self.get_password_file_path()
        if not os.path.exists(path):
            with open(path, "w") as f:
                f.write(mkpassword())
        return path

    def get_encryption_method(self):
        if "gpg-key" in self:
            return "gpg-key"
        return self.get("enc-method", "gpg-symmetric")

    def get_contact_str(self):
        bits = filter(None, [
            self.get("full-name"),
            self.get("email"),
            self.get("contact-info"),
        ])
        if not bits:
            bits.append("No contact information provided.")
        return "%s\n%s\n%s" %(
            self["name"],
            "-" * len(self["name"]),
            "\n".join(bits),
        )

    def __str__(self):
        return self["name"]


class OnionEncryptor(object):
    def __init__(self, config, args):
        self.config = config
        self.args = args
        self.input_fname = args.input.name

    def run(self):
        args = self.args

        if not args.output:
            args.output = os.path.dirname(self.input_fname) or "."

        output_is_encrypted = is_path_encrypted(args.output)
        if output_is_encrypted is None:
            print "WARNING: unable to determine whether output directory is secure."
            print "         Be sure to securely delete it when you're done:"
            print "             $ srm -r '%s'" %(args.output, )
        elif not output_is_encrypted:
            print "WARNING: output directory is not secure!"
            print "         Unencrypted (or less-than-ideally-encrypted) temporary "
            print "         files might be left on disk."
            print "         Hint: use '%s --make-encrypted-workspace' to create "
            print "         a securely encrypted disk image."
            res = raw_input("Continue? [y/N]: ")
            if res[:1] != "y":
                print "Aborting."

        mkdir(args.output)
        self._tempdir_base, created = mkdir(args.output, "onioncrypt-work-tmp")
        try:
            if not created:
                shutil.rmtree(self._tempdir_base)
                mkdir(self._tempdir_base)
            
            self.people = [
                Person(name, dict(self.config.items(name)))
                for name in self.config.sections()
            ]
            output_dir, _ = mkdir(self._tempdir_base, "output")
            for person in self.people:
                person.set_password_file_prefix(output_dir)
                self.build_bundle(person, output_dir)
                if person.has_password():
                    print os.path.basename(person.get_password_file_path())
                print
            for f in os.listdir(output_dir):
                f = pjoin(output_dir, f)
                target = pjoin(args.output, os.path.basename(f))
                if os.path.exists(target):
                    os.unlink(target)
                os.rename(f, target)
        finally:
            shutil.rmtree(self._tempdir_base)

    def build_bundle(self, person, output_dir, previous_people=None, depth=None, indent=""):
        """ Builds a bundle for ``person``, storing the result in ``output_dir``
            and returning the bundle's filename. """

        previous_people = previous_people or []
        depth = depth or person["depth"]
        if depth == 1:
            res = self.encrypt_file_to(
                person,
                self.input_fname,
                pjoin(output_dir, person["name"]),
            )
            print "%s%s" %(indent, os.path.basename(res))
            return res

        new_prev_people = previous_people + [person]

        print "%s%s/" %(indent, person)
        potential_targets = self.person_targets(person, previous_people)
        if not potential_targets:
            print "WARNING: Could not encrypt past %s: no valid people to encrypt to." %(
                " -> ".join(map(str, new_prev_people)),
            )
            return None

        with self.tempdir(output_dir, person["name"]) as tempdir:
            for target in potential_targets:
                self.build_bundle(
                    target, tempdir,
                    previous_people=new_prev_people,
                    depth=depth - 1,
                    indent=indent + "| ",
                )
            with open(pjoin(tempdir, "README.txt"), "w") as f:
                self.write_readme_for_targets(f, person, potential_targets, depth)
            res = self.encrypt_file_to(person, tempdir, tempdir)
            print "%sv" %(indent, )
            print "%s%s" %(indent, os.path.basename(res))
            return res

    def encrypt_file_to(self, person, input_path, output_prefix):
        """ Encrypts ``input_file`` to ``person``, saving it to
            ``$output_prefix.ext``. """

        encryption_method = person.get_encryption_method()
        if encryption_method == "gpg-symmetric":
            input_fname = self.require_file(input_path)
            output_fname = output_prefix + splitext(input_fname)[1] + ".gpg"
            xsystem("gpg --symmetric --cipher-algo AES256 --passphrase-file %s -o %s < %s" %(
                shescape(person.get_or_create_password_file()),
                shescape(output_fname),
                shescape(input_fname),
            ), quiet=True)

        elif encryption_method == "gpg-key":
            input_fname = self.require_file(input_path)
            output_fname = output_prefix + splitext(input_fname)[1] + ".gpg"
            xsystem("gpg --encrypt --recipient %s -o %s < %s" %(
                shescape(person["gpg-key"]),
                shescape(output_fname),
                shescape(input_fname),
            ), quiet=True)

        elif encryption_method == "dmg-symmetric":
            input_dir = self.require_directory(input_path)
            output_fname = output_prefix + ".dmg"
            xsystem(
                "hdiutil create -encryption AES-256 "
                "-volname %s -fs HFS+J -stdinpass "
                "-srcfolder %s %s" %(
                    shescape(person["name"]),
                    shescape(input_dir),
                    shescape(output_fname),
                ),
                stdin=open(person.get_or_create_password_file()).read(),
                quiet=True,
            )

        elif encryption_method == "UNSAFE-zip":
            input_fname = self.require_file(input_path)
            output_fname = output_prefix + splitext(input_fname)[1]
            shutil.copy(input_fname, output_fname)

        else:
            print "ERROR: Invalid encryption method for %s: %s." %(person, encryption_method)
            print "       Use either 'gpg-key=...' or 'enc-method=...' with 'gpg-symmetric' or 'dmg-symmetric')"
            sys.exit(1)

        return output_fname

    def person_targets(self, person, previous):
        return [p for p in self.people if p != person and p not in previous]

    @contextmanager
    def tempdir(self, *a):
        dir, _ = mkdir(*a)
        try:
            yield dir
        finally:
            shutil.rmtree(dir)

    def require_file(self, path):
        if not os.path.isdir(path):
            return path
        output_prefix, _ = mkdir(
            self._tempdir_base,
            "required-files",
            sha256(path),
        )
        return zip_directory(path, output_prefix)

    def require_directory(self, path):
        if os.path.isdir(path):
            return path

        output_dir, created = mkdir(
            self._tempdir_base,
            "required-directories",
            sha256(path),
            splitext(os.path.basename(path))[0],
        )
        if not created:
            return output_dir
        shutil.copy(path, output_dir)
        return output_dir

    def write_readme_for_targets(self, fobj, person, target_people, depth):
        fobj.write(dedent("""
            Decryption Instructions
            =======================

            This is encrypted layer %s of %s. To decrypt the next layer,
            contact any of the following people and securely (preferrably via
            USB key, encrypted chat such as Signal or iMessage, or local
            network; email should not be used unless absolutely necessary) send
            them the appropriate file, which they will be able to decrypt.

            Contact information:

            %s
        """) %(
            person["depth"] - depth + 1,
            person["depth"],
            "\n\n".join(p.get_contact_str() for p in target_people)
        ))


def zip_directory(path, output_dir=None):
    basename = os.path.basename(path)
    output_dir = output_dir or os.path.dirname(path)

    zipfile_name = pjoin(output_dir, basename + ".zip")
    if os.path.exists(zipfile_name):
        return zipfile_name

    files = os.listdir(path)
    if not files:
        print "WARNING: trying to zip an empty directory:", path
    content_prefix = basename if len(files) > 1 else ""

    with zipfile.ZipFile(zipfile_name, "w", zipfile.ZIP_DEFLATED) as zf:
        for f in files:
            zf.write(pjoin(path, f), arcname=pjoin(content_prefix, f))
    return zipfile_name

_words = []
def mkpassword():
    if not _words:
        _words.extend([
            x.strip().lower() for x in open("/usr/share/dict/words")
            if len(x) <= 8
        ])

        # TODO: 50000 and 100 are picked entirely arbitrarily with absolutely
        # zero basis in any sort of math at all, whatsoever. This should be
        # fixed.
        if len(_words) < 50000:
            print "WARNING: insufficient entropy!"
            print           "/usr/share/dict/words only has %s words" %(len(_words), )

    password = []
    while len("-".join(password)) < 100:
        password.append(random.choice(_words))
    return "-".join(password)

def mkdir(*parts):
    dirname = pjoin(*parts)
    try:
        os.makedirs(dirname)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
        return dirname, False
    return dirname, True

pjoin = os.path.join
splitext = os.path.splitext

def shescape(s):
    return "'" + to_str(s).replace("'", "\\'") + "'"

def sha256(s):
    return hashlib.sha256(s).hexdigest()

def is_path_encrypted(d):
    if sys.platform != "darwin":
        return None

    d = os.path.abspath(d)
    mountpoints = plist2json(xsystem("diskutil list -plist", quiet=True))

    best_match = ""
    candidates = list(mountpoints["AllDisksAndPartitions"])
    for disk in candidates:
        if disk.get("Partitions"):
            candidates.extend(disk["Partitions"])

        mountpoint = disk.get("MountPoint")
        if not mountpoint:
            continue

        if d.startswith(mountpoint) and len(mountpoint) > len(best_match):
            best_match = mountpoint

    mountpoint = best_match
    if not mountpoint:
        print "WARNING: Unable to determine the volume containing %r" %(d, )
        return None

    info = plist2json(xsystem("diskutil info -plist %s" %(shescape(mountpoint), ), quiet=True))
    if "CoreStorageEncrypted" in info:
        return info["CoreStorageEncrypted"]

    if info.get("MediaName") == "disk image":
        images = plist2json(xsystem("hdiutil info -plist", quiet=True))
        for img in images["images"]:
            if any(x.get("mount-point") == mountpoint for x in img.get("system-entities", [])):
                break
        else:
            print "WARNING: Unable to determine disk image for %r" %(d, )
            return None

        return img.get("image-encrypted", False)

    print "WARNING: Unknown disk MediaName: %r" %(info.get("MediaName"), )
    return None

def make_encrypted_workspace():
    password = os.urandom(256).encode("base64").strip().replace("\n", "")
    image_file = "/tmp/onioncrypt-workspace-%s.sparseimage" %(os.urandom(8).encode("hex"), )
    xsystem(
        "hdiutil create -encryption AES-256 -type SPARSE "
        "-volname OnioncryptWorkspace -size 1gb -fs HFS+J "
        "-stdinpass " + image_file,
        stdin=password,
    )
    xsystem("hdiutil attach -encryption -stdinpass " + image_file, stdin=password)

    res = xsystem("hdiutil info -plist", print_stdout=False)
    mounted_images = plist2json(res)
    for img in mounted_images["images"]:
        if img["image-path"] == image_file:
            break
    else:
        print "ERROR: Could not determine image mountpoint"
        sys.exit(1)

    mountpoints = [
        x["mount-point"]
        for x in img["system-entities"]
        if "mount-point" in x
    ]
    if not mountpoints:
        print "ERROR: Mountpoint not listed for new image"
    mountpoint = mountpoints[0]
    with open("%s/disk-image-password.txt" %(mountpoint, ), "w") as f:
        f.write(password)

    print
    print "Encrypted image:"
    print "          File:", image_file
    print "      Password:", f.name
    print "    Mountpoint:", mountpoint
    print "Hint:"
    print "    cd '%s'" %(mountpoint, )


def xsystem(cmd, echo=True, stdin=None, print_stdout=True, quiet=False):
    if quiet:
        echo = False
        print_stdout = False
    if echo:
        print cmd
    proc = sp.Popen(cmd, shell=True, stdin=sp.PIPE, stdout=sp.PIPE)
    if stdin is not None:
        proc.stdin.write(stdin)
        proc.stdin.close()
    stdout = []
    while proc.returncode is None:
        chunk = proc.stdout.read(1024)
        if not chunk:
            break
        if print_stdout:
            sys.stdout.write(chunk)
        stdout.append(chunk)
    proc.wait()
    if proc.returncode != 0:
        print "ERROR: command failed with status %s" %(proc.returncode, )
        if not echo:
            print cmd
        sys.exit(1)
    return "".join(stdout)

def plist2json(plist_bytes):
    doc = ET.fromstring(plist_bytes)

    def _plist2json(elem):
        if elem.tag == "dict":
            res = {}
            children = iter(elem.getchildren())
            for key in children:
                res[key.text] = _plist2json(children.next())
            return res

        if elem.tag == "string":
            return elem.text

        if elem.tag == "array":
            return map(_plist2json, elem.getchildren())

        if elem.tag == "integer":
            return int(elem.text)

        if elem.tag == "data":
            return elem.text.decode("base64")

        if elem.tag == "true":
            return True

        if elem.tag == "false":
            return False

        raise AssertionError("Unexpected plist tag: %r" %(elem.tag, ))

    return _plist2json(doc.getchildren()[0])


def to_str(obj, encoding="utf-8", **encode_args):
    """
    Returns a ``str`` of ``obj``, encoding using ``encoding`` if necessary. For
    example::
        >>> some_str = b"\xff"
        >>> some_unicode = u"\u1234"
        >>> some_exception = Exception(u'Error: ' + some_unicode)
        >>> r(to_str(some_str))
        b'\xff'
        >>> r(to_str(some_unicode))
        b'\xe1\x88\xb4'
        >>> r(to_str(some_exception))
        b'Error: \xe1\x88\xb4'
        >>> r(to_str([42]))
        b'[42]'
    See source code for detailed semantics.
    """
    if isinstance(obj, str):
        return obj
    if isinstance(obj, unicode) or hasattr(obj, "__unicode__"):
        return unicode(obj).encode(encoding, **encode_args)
    return str(obj)



sample_config = """
; This example configuration will generate:
; readme.txt
; alex-password.txt
; judy-password.txt
; david.zip.gpg:
;     README.txt
;     alex.zip.gpg: judy.dmg, chris.zip.gpg
; judy.zip.dmg:
;     README.txt
;     alex.zip.gpg: chris.zip.gpg, alex.zip.gpg, david.zip.gpg
; alex.zip.gpg
;     README.txt
;     chris.zip.gpg: judy.dmg, david.zip.gpg
;     judy.dmg: chris.zip.gpg
;     david.zip.gpg: chris.zip.gpg
; chris.zip.gpg
;     README.txt
;     alex.zip.gpg: judy.dmg, david.zip.gpg
;     judy.dmg: alex.zip.gpg
;     david.zip.gpg: alex.zip.gpg

[DEFAULT]
depth: 3

[david]
; A gpg key files should be encrypted to.
gpg-key: b230230d
; Files encrypted to david will never contain files encrypted to judy or
; chris (although the files encrypted to david may contain judy or chris).
; Exclusion is one direction. Both chris and judy may get files encrypted to
; david.
exclude: judy, chris

; Contact information, for the README.txt file which will appear in each
; encrypted bundle. It may be partially (or fully) omitted.
email: david@wolever.net
full-name: David Wolever
; The contact-info field will be incldued verbatim
contact-info:
    Home phone: 416 555 1234
    Cell phone: 416 555 4321
    123 Fake St
    Toronto, ON


[judy]
; A password will be generated for judy and stored in 'judy-password.txt',
; then files will be stored in a disk image encrypted with that password.
enc-method=dmg-symmetric
; Files encrypted to judy will only contain one file encrypted to alex.
; Multiple names can be included, separated by a comma: alex, david
include: alex
email: judy@example.com

[alex]
; A password will be generated for alex and stored in 'alex-password.txt',
; then files will be stored in a zip file encrypted with 'gpg --symmetric'.
enc-method=gpg-symmetric

[chris]
gpg-key: abcd1234
""".lstrip()


class ArgumentParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write("error: %s\n" % message)
        self.print_help()
        sys.stderr.write("\nHINT: use --sample-config to show a sample config file.\n")
        sys.exit(2)

parser = ArgumentParser(description="Encrypt a file with multiple levels of encryption to multiple people.")

parser.add_argument("config_file", type=argparse.FileType("r"))
parser.add_argument("input", type=argparse.FileType("r"))
parser.add_argument("output", nargs="?", default=None)
parser.add_argument("-c", "--sample-config", action="store_true", help="Print a sample config file.")
parser.add_argument("-m", "--make-encrypted-workspace", action="store_true", help="""
    Create and mount an encrypted disk image which can be used as a temporary
    workspace to reduce the risk of leaving unencrypted data on disk (OS X
    only).
""")


if "--sample-config" in sys.argv or "-c" in sys.argv:
    print sample_config
    sys.exit(0)


if "--make-encrypted-workspace" in sys.argv or "-m" in sys.argv:
    make_encrypted_workspace()
    sys.exit(0)

args = parser.parse_args()

config = ConfigParser(allow_no_value=True)
config.read(args.config_file.name)

sys.exit(OnionEncryptor(config, args).run())
